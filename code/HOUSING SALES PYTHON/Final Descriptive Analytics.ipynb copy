{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Python Module Project\n",
    "## Descriptive Analytics \n",
    "#### Spencer Fairbairn, Chidi Nzerem, Jacob Pulitzer, William Tardif, Portia Gifford, Allison Bruhn\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Part 1: Getting Ready"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first step in  Python consists of making sure you are in the correct working directory. To do this you would write the following code..."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "'/Users/Fairbairnsj 1/Desktop/MSBA/SoBA'"
      ]
     },
     "execution_count": 1,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import os\n",
    "os.getcwd()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The code above first import the os function to be able to check working directory then the next line of code checks that the working directory that you are in\n",
    "\n",
    "Once you have made sure you are in the correct working directory we will first import all of the librarys to be able to run analysis on the data that we will shortly be loading in "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np #library used for working with arrays\n",
    "import pandas as pd #Used for data manipulation and analysis\n",
    "import seaborn as sb #used fordrawing attractive and informative statistical graphics"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "\n",
    "### Part 2: Loading the dataset"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "For this project we decided to work with a comma-seperated-value file describing different valuations of houses and the factors that contributed to that value.\n",
    "\n",
    "The first step that you should take to load the dataset is make sure the file is stored in the same working directory that your notebook is stored in. Once you have made sure that the notebook and csv file are in the same folder you can begin coding"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "H = pd.read_csv('house_sales_project.csv')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "By running the pandas function \"pd.read_csv(' ') we can load the dataset right into your python notebook allowing you to run analysis on it"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AdjSalePrice</th>\n",
       "      <th>SqFtLot</th>\n",
       "      <th>SqFtTotLiving</th>\n",
       "      <th>Bathrooms</th>\n",
       "      <th>Bedrooms</th>\n",
       "      <th>BldgGrade</th>\n",
       "      <th>YrBuilt</th>\n",
       "      <th>YrRenovated</th>\n",
       "      <th>TrafficNoise</th>\n",
       "      <th>LandVal</th>\n",
       "      <th>ImpsVal</th>\n",
       "      <th>ZipCode</th>\n",
       "      <th>NewConstruction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>300805.0</td>\n",
       "      <td>9373</td>\n",
       "      <td>2400</td>\n",
       "      <td>3.00</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>1991</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>70000</td>\n",
       "      <td>229000</td>\n",
       "      <td>98002</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1076162.0</td>\n",
       "      <td>20156</td>\n",
       "      <td>3764</td>\n",
       "      <td>3.75</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>2005</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>203000</td>\n",
       "      <td>590000</td>\n",
       "      <td>98166</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>761805.0</td>\n",
       "      <td>26036</td>\n",
       "      <td>2060</td>\n",
       "      <td>1.75</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>1947</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>183000</td>\n",
       "      <td>275000</td>\n",
       "      <td>98166</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>442065.0</td>\n",
       "      <td>8618</td>\n",
       "      <td>3200</td>\n",
       "      <td>3.75</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>1966</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>104000</td>\n",
       "      <td>229000</td>\n",
       "      <td>98168</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>297065.0</td>\n",
       "      <td>8620</td>\n",
       "      <td>1720</td>\n",
       "      <td>1.75</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>1948</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>104000</td>\n",
       "      <td>205000</td>\n",
       "      <td>98168</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>411781.0</td>\n",
       "      <td>1012</td>\n",
       "      <td>930</td>\n",
       "      <td>1.50</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "      <td>2008</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>170000</td>\n",
       "      <td>207000</td>\n",
       "      <td>98144</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>380785.0</td>\n",
       "      <td>34465</td>\n",
       "      <td>1750</td>\n",
       "      <td>1.50</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>1961</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>165000</td>\n",
       "      <td>227000</td>\n",
       "      <td>98178</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>349489.0</td>\n",
       "      <td>14659</td>\n",
       "      <td>1860</td>\n",
       "      <td>1.75</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>1963</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>115000</td>\n",
       "      <td>154000</td>\n",
       "      <td>98178</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>231239.0</td>\n",
       "      <td>5324</td>\n",
       "      <td>990</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1930</td>\n",
       "      <td>0</td>\n",
       "      <td>3</td>\n",
       "      <td>90000</td>\n",
       "      <td>75000</td>\n",
       "      <td>98032</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>463148.0</td>\n",
       "      <td>10585</td>\n",
       "      <td>1980</td>\n",
       "      <td>2.00</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>1924</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>124000</td>\n",
       "      <td>116000</td>\n",
       "      <td>98055</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   AdjSalePrice  SqFtLot  SqFtTotLiving  Bathrooms  Bedrooms  BldgGrade  \\\n",
       "0      300805.0     9373           2400       3.00         6          7   \n",
       "1     1076162.0    20156           3764       3.75         4         10   \n",
       "2      761805.0    26036           2060       1.75         4          8   \n",
       "3      442065.0     8618           3200       3.75         5          7   \n",
       "4      297065.0     8620           1720       1.75         4          7   \n",
       "5      411781.0     1012            930       1.50         2          8   \n",
       "6      380785.0    34465           1750       1.50         3          8   \n",
       "7      349489.0    14659           1860       1.75         4          7   \n",
       "8      231239.0     5324            990       1.00         2          6   \n",
       "9      463148.0    10585           1980       2.00         4          6   \n",
       "\n",
       "   YrBuilt  YrRenovated  TrafficNoise  LandVal  ImpsVal  ZipCode  \\\n",
       "0     1991            0             0    70000   229000    98002   \n",
       "1     2005            0             0   203000   590000    98166   \n",
       "2     1947            0             0   183000   275000    98166   \n",
       "3     1966            0             0   104000   229000    98168   \n",
       "4     1948            0             0   104000   205000    98168   \n",
       "5     2008            0             0   170000   207000    98144   \n",
       "6     1961            0             0   165000   227000    98178   \n",
       "7     1963            0             0   115000   154000    98178   \n",
       "8     1930            0             3    90000    75000    98032   \n",
       "9     1924            0             0   124000   116000    98055   \n",
       "\n",
       "   NewConstruction  \n",
       "0            False  \n",
       "1             True  \n",
       "2            False  \n",
       "3            False  \n",
       "4            False  \n",
       "5             True  \n",
       "6            False  \n",
       "7            False  \n",
       "8            False  \n",
       "9            False  "
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "H.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The above code shows us the first 10 rows of the dataset alowing us to be able to see  the different collumns in the data. "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "### Part 3: The Analysis\n",
    "#### Question 1: What is the min, max, median and mean adj price for new builds vs existing?\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To find the minimum value in python you would first decide on the column in which you would want to find the minimum value, from there you would put the dataset name \"H\" separated by a period then the column that you would like to find the smallest value \"AdjSalePrice\" followed by \".min()\". The .min() function searches through the column for the smallest value and then spits out the smallest value. Below I wanted to write a print statement that easily displayed the minimum value so I had to change the minimum value to a string value to be able to join it with the statement that I had written out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The minimum value in the AdjSalePrice column is: 3368.0\n"
     ]
    }
   ],
   "source": [
    "print(\"The minimum value in the AdjSalePrice column is: \" + str(H.AdjSalePrice.min()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second part of analyzing the minimum score was seeing if there was a difference in sale price based on if the house was a new build or if it was an older property. To do this we ran a groupby analysis of AdjSalePrice on NewConstruction to see if if that had a change on the minimum value. We can see that \"False\" equates to properties that were already exsisting and \"True\" Shows if the property was a new build."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NewConstruction\n",
       "False     3368.0\n",
       "True     95799.0\n",
       "Name: AdjSalePrice, dtype: float64"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MinBuild = H.groupby('NewConstruction')['AdjSalePrice'].min()\n",
    "MinBuild"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To find the maximum value in python you would first decide on the column in which you would want to find the maximum value, from there you would put the dataset name \"H\" separated by a period then the column that you would like to find the maximum value \"AdjSalePrice\" followed by \".max()\". The .max() function searches through the column for the largest value and then spits it out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The maximum value in the AdjSalePrice column is: 11644855.0\n"
     ]
    }
   ],
   "source": [
    "print(\"The maximum value in the AdjSalePrice column is: \" + str(H.AdjSalePrice.max()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second part of analyzing the maximum score was seeing if there was a difference in sale price based on if the house was a new build or if it was an older property. To do this we ran a groupby analysis of AdjSalePrice on NewConstruction to see if if that had a change on the maximum value. We can see that \"False\" equates to properties that were already exsisting and \"True\" Shows if the property was a new build."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NewConstruction\n",
       "False    11644855.0\n",
       "True      6881510.0\n",
       "Name: AdjSalePrice, dtype: float64"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MaxBuild = H.groupby('NewConstruction')['AdjSalePrice'].max()\n",
    "MaxBuild"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To find the median value in python you would first decide on the column in which you would want to find the median value, from there you would put the dataset name \"H\" separated by a period then the column that you would like to find the median value \"AdjSalePrice\" followed by \".median()\". The .median() function searches through the column for the middle value and then spits it out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The median of the AdjSalePrice column is: 471315.0\n"
     ]
    }
   ],
   "source": [
    "print(\"The median of the AdjSalePrice column is: \" + str(H.AdjSalePrice.median()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second part of analyzing the median score was seeing if there was a difference in sale price based on if the house was a new build or if it was an older property. To do this we ran a groupby analysis of AdjSalePrice on NewConstruction to see if if that had a change on the median value. We can see that \"False\" equates to properties that were already exsisting and \"True\" Shows if the property was a new build."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NewConstruction\n",
       "False    467544.0\n",
       "True     503621.0\n",
       "Name: AdjSalePrice, dtype: float64"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MedBuild = H.groupby('NewConstruction')['AdjSalePrice'].median()\n",
    "MedBuild"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "To find the mean value in python you would first decide on the column in which you would want to find the mean, from there you would put the dataset name \"H\" separated by a period then the column that you would like to find the mean value \"AdjSalePrice\" followed by \".mean()\". The .mean() function searches through the column for the average and then spits it out."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean of the AdjSalePrice collumn is: 565252.3102384416\n"
     ]
    }
   ],
   "source": [
    "print(\"The mean of the AdjSalePrice collumn is: \" + str(H.AdjSalePrice.mean()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second part of analyzing the mean was seeing if there was a difference in sale price based on if the house was a new build or if it was an older property. To do this we ran a groupby analysis of AdjSalePrice on NewConstruction to see if if that had a change on the mean value. We can see that \"False\" equates to properties that were already exsisting and \"True\" Shows if the property was a new build."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "NewConstruction\n",
       "False    559802.409116\n",
       "True     611453.539683\n",
       "Name: AdjSalePrice, dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NCBuild = H.groupby('NewConstruction')['AdjSalePrice'].mean()\n",
    "NCBuild"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 2: Which Zip Codes have the highest average adjusted price? "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The first step in finding which zip codes have the highest average adjusted price was to group the AdjSalePrice on the ZipCode and then we ran the mean of AdjSalePrice to be able to see what the highest average price was."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [],
   "source": [
    "HighZip = H.groupby('ZipCode')['AdjSalePrice'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "After running the groupby analysis we noticed that there was no order to the dataset at all meaning finding the highest adjusted price would be terribly hard. To organize the dataset we used the \".sort_values\" function that allows us organize the prices by how expensive they were. You will also notice that we have \"(ascending = False)\" what this does is organizes the data from most expensive to least expensive."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [],
   "source": [
    "HighZip1 = HighZip.sort_values(ascending=False)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Now that we have organized our data we now need to call our data, we could do this by just calling \"HighZip\" but we only wanted to see the top 5 zip codes so we called the \".head(5)\" function that just calls the first 5 variables in the dataset."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "ZipCode\n",
       "98039    2.154126e+06\n",
       "98004    1.464104e+06\n",
       "98040    1.349175e+06\n",
       "9800     1.278632e+06\n",
       "98112    1.094507e+06\n",
       "Name: AdjSalePrice, dtype: float64"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "HighZip1.head(5)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 3: What is the difference in average adj prices in newly renovated and non-renovated properties? \n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Similar to question two we would first start this question by running a groupby analysis, grouping the year the property was renovated and taking the mean of the AdjSalePrice. We would also run a groupby analysis grouping the Year built with the mean of AdjSalePrice."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "HRen = H.groupby('YrRenovated')['AdjSalePrice'].mean()\n",
    "HNRen = H.groupby('YrBuilt')['AdjSalePrice'].mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The second step of this question is to find out what the mean sale price of a house that has been renovated compared to that has not. To do this we would print the mean of the Renovated houses dataframe, and then we would print the mean of the non Renovated house. Following this we will minus the mean of the non renovated from the renovated mean to be able to see the difference between the two."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "635254.5792383329\n",
      "558389.5969285514\n",
      "76864.98230978148\n"
     ]
    }
   ],
   "source": [
    "print(HRen.mean())\n",
    "print(HNRen.mean())\n",
    "print(HRen.mean()-HNRen.mean())\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "YrRenovated\n",
       "0       555623.676421\n",
       "1938    196016.000000\n",
       "1943    202702.000000\n",
       "1944    508419.500000\n",
       "1945    536722.000000\n",
       "1948    249799.666667\n",
       "1953    973017.000000\n",
       "1954    305694.500000\n",
       "1955    763548.000000\n",
       "1956    313093.500000\n",
       "Name: AdjSalePrice, dtype: float64"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "HRen.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "YrBuilt\n",
       "1900    615536.711340\n",
       "1901    667088.880000\n",
       "1902    585493.545455\n",
       "1903    523000.720930\n",
       "1904    667523.900000\n",
       "1905    749010.217949\n",
       "1906    611326.694444\n",
       "1907    696419.602740\n",
       "1908    576259.572727\n",
       "1909    645595.517241\n",
       "Name: AdjSalePrice, dtype: float64"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "HNRen.head(10)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 4: What percentage of houses in our data set sold over a million dollars? What is the average, sq ft living, bathrooms, bedrooms and building grade of those houses?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AdjSalePrice</th>\n",
       "      <th>SqFtLot</th>\n",
       "      <th>SqFtTotLiving</th>\n",
       "      <th>Bathrooms</th>\n",
       "      <th>Bedrooms</th>\n",
       "      <th>BldgGrade</th>\n",
       "      <th>YrBuilt</th>\n",
       "      <th>YrRenovated</th>\n",
       "      <th>TrafficNoise</th>\n",
       "      <th>LandVal</th>\n",
       "      <th>ImpsVal</th>\n",
       "      <th>ZipCode</th>\n",
       "      <th>NewConstruction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1076162.0</td>\n",
       "      <td>20156</td>\n",
       "      <td>3764</td>\n",
       "      <td>3.75</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>2005</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>203000</td>\n",
       "      <td>590000</td>\n",
       "      <td>98166</td>\n",
       "      <td>True</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>56</th>\n",
       "      <td>1774213.0</td>\n",
       "      <td>7821</td>\n",
       "      <td>3620</td>\n",
       "      <td>3.50</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>1958</td>\n",
       "      <td>2010</td>\n",
       "      <td>0</td>\n",
       "      <td>541000</td>\n",
       "      <td>808000</td>\n",
       "      <td>98040</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>2227361.0</td>\n",
       "      <td>26540</td>\n",
       "      <td>5000</td>\n",
       "      <td>3.50</td>\n",
       "      <td>5</td>\n",
       "      <td>10</td>\n",
       "      <td>2008</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1013000</td>\n",
       "      <td>1053000</td>\n",
       "      <td>98040</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>81</th>\n",
       "      <td>2013466.0</td>\n",
       "      <td>16240</td>\n",
       "      <td>5050</td>\n",
       "      <td>3.25</td>\n",
       "      <td>4</td>\n",
       "      <td>11</td>\n",
       "      <td>1987</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>876000</td>\n",
       "      <td>813000</td>\n",
       "      <td>98040</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>82</th>\n",
       "      <td>3826741.0</td>\n",
       "      <td>16750</td>\n",
       "      <td>6210</td>\n",
       "      <td>5.50</td>\n",
       "      <td>5</td>\n",
       "      <td>11</td>\n",
       "      <td>2009</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>2412000</td>\n",
       "      <td>2698000</td>\n",
       "      <td>98040</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22621</th>\n",
       "      <td>1894376.0</td>\n",
       "      <td>11500</td>\n",
       "      <td>1990</td>\n",
       "      <td>2.25</td>\n",
       "      <td>3</td>\n",
       "      <td>9</td>\n",
       "      <td>1940</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1416000</td>\n",
       "      <td>318000</td>\n",
       "      <td>98102</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22625</th>\n",
       "      <td>3096952.0</td>\n",
       "      <td>7500</td>\n",
       "      <td>6810</td>\n",
       "      <td>4.25</td>\n",
       "      <td>5</td>\n",
       "      <td>12</td>\n",
       "      <td>1922</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>768000</td>\n",
       "      <td>1787000</td>\n",
       "      <td>98102</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22627</th>\n",
       "      <td>1049224.0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2390</td>\n",
       "      <td>2.25</td>\n",
       "      <td>4</td>\n",
       "      <td>9</td>\n",
       "      <td>1967</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>687000</td>\n",
       "      <td>341000</td>\n",
       "      <td>98102</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22628</th>\n",
       "      <td>1053116.0</td>\n",
       "      <td>5000</td>\n",
       "      <td>2530</td>\n",
       "      <td>2.50</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>1948</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>687000</td>\n",
       "      <td>310000</td>\n",
       "      <td>98102</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22685</th>\n",
       "      <td>1586196.0</td>\n",
       "      <td>23914</td>\n",
       "      <td>4720</td>\n",
       "      <td>4.50</td>\n",
       "      <td>4</td>\n",
       "      <td>11</td>\n",
       "      <td>2000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>703000</td>\n",
       "      <td>951000</td>\n",
       "      <td>98040</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1628 rows × 13 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       AdjSalePrice  SqFtLot  SqFtTotLiving  Bathrooms  Bedrooms  BldgGrade  \\\n",
       "1         1076162.0    20156           3764       3.75         4         10   \n",
       "56        1774213.0     7821           3620       3.50         5         10   \n",
       "80        2227361.0    26540           5000       3.50         5         10   \n",
       "81        2013466.0    16240           5050       3.25         4         11   \n",
       "82        3826741.0    16750           6210       5.50         5         11   \n",
       "...             ...      ...            ...        ...       ...        ...   \n",
       "22621     1894376.0    11500           1990       2.25         3          9   \n",
       "22625     3096952.0     7500           6810       4.25         5         12   \n",
       "22627     1049224.0     5000           2390       2.25         4          9   \n",
       "22628     1053116.0     5000           2530       2.50         4          8   \n",
       "22685     1586196.0    23914           4720       4.50         4         11   \n",
       "\n",
       "       YrBuilt  YrRenovated  TrafficNoise  LandVal  ImpsVal  ZipCode  \\\n",
       "1         2005            0             0   203000   590000    98166   \n",
       "56        1958         2010             0   541000   808000    98040   \n",
       "80        2008            0             0  1013000  1053000    98040   \n",
       "81        1987            0             0   876000   813000    98040   \n",
       "82        2009            0             0  2412000  2698000    98040   \n",
       "...        ...          ...           ...      ...      ...      ...   \n",
       "22621     1940            0             0  1416000   318000    98102   \n",
       "22625     1922            0             0   768000  1787000    98102   \n",
       "22627     1967            0             0   687000   341000    98102   \n",
       "22628     1948            0             0   687000   310000    98102   \n",
       "22685     2000            0             1   703000   951000    98040   \n",
       "\n",
       "       NewConstruction  \n",
       "1                 True  \n",
       "56               False  \n",
       "80               False  \n",
       "81               False  \n",
       "82               False  \n",
       "...                ...  \n",
       "22621            False  \n",
       "22625            False  \n",
       "22627            False  \n",
       "22628            False  \n",
       "22685            False  \n",
       "\n",
       "[1628 rows x 13 columns]"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "H.loc[(H.AdjSalePrice > 1000000)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "The loc() function is used to access a group of rows and columns by label(s) or a boolean array. In this case we used it to be able to access all the houses that were sold for over 1000000. At the bottom of the table it give you the dimensions of the table"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The number of rows in this data set is: 22689\n"
     ]
    }
   ],
   "source": [
    "rows = H.shape[0]\n",
    "print(\"The number of rows in this data set is: \" + str(rows))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I use the function shape() to find the total number of rows in the column so we can calculate our percentages"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The percent of houses sold over a million dollars is: 7.175283176869848\n"
     ]
    }
   ],
   "source": [
    "percentage = 1628/rows * 100\n",
    "print(\"The percent of houses sold over a million dollars is: \" + str(percentage))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### What is the average, sq ft living, bathrooms, bedrooms and building grade of those houses?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [],
   "source": [
    "grt_mill = H.loc[(H.AdjSalePrice > 1000000)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I place the tables of houses over 1000000 in a variable called \"grt_mill\" so i can further manipulate the values "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean of the AdjSalePrice over a million is: 3801.983415233415\n"
     ]
    }
   ],
   "source": [
    "print(\"The mean of the AdjSalePrice over a million is: \" + str(grt_mill.SqFtTotLiving.mean()))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean of the Bedrooms over a million is: 4.061425061425061\n"
     ]
    }
   ],
   "source": [
    "print(\"The mean of the Bedrooms over a million is: \" + str(grt_mill.Bedrooms.mean()))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean of the Bathrooms over a million is: 3.2443181818181817\n"
     ]
    }
   ],
   "source": [
    "print(\"The mean of the Bathrooms over a million is: \" + str(grt_mill.Bathrooms.mean()))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean of the BldgGrade over a million is: 9.882678132678132\n"
     ]
    }
   ],
   "source": [
    "print(\"The mean of the BldgGrade over a million is: \" + str(grt_mill.BldgGrade.mean()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "In order to find the means I used the mean() function to call on the row i want inside the variable get_mill. This allowed me to find the mean rows that were sold strictly above 1000000"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 5: What’s the average “ implied value” or MPS  by zip code? (adj sale price - land value - imps value)? MPS is figurative for Market Predictor Scale "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      1805.0\n",
       "1    283162.0\n",
       "2    303805.0\n",
       "3    109065.0\n",
       "4    -11935.0\n",
       "5     34781.0\n",
       "6    -11215.0\n",
       "7     80489.0\n",
       "8     66239.0\n",
       "9    223148.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clmn = list(H)\n",
    "\n",
    "for i in H:\n",
    "    avg_valzip = H.AdjSalePrice - H.ImpsVal - H.LandVal \n",
    "\n",
    "avg_valzip.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The mean of the MPS is: 44433.22398519106\n"
     ]
    }
   ],
   "source": [
    "print(\"The mean of the MPS is: \" + str(avg_valzip.mean()))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Since we were iterating through the data set I used a forloop to run through all the colums and subract the values i need and placed it into a variable called \"avg_valzip\". Then to take the mean i used the mean() on that variable."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Question 6: What percentage of our homes have a negative MPS?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AdjSalePrice</th>\n",
       "      <th>SqFtLot</th>\n",
       "      <th>SqFtTotLiving</th>\n",
       "      <th>Bathrooms</th>\n",
       "      <th>Bedrooms</th>\n",
       "      <th>BldgGrade</th>\n",
       "      <th>YrBuilt</th>\n",
       "      <th>YrRenovated</th>\n",
       "      <th>TrafficNoise</th>\n",
       "      <th>LandVal</th>\n",
       "      <th>ImpsVal</th>\n",
       "      <th>ZipCode</th>\n",
       "      <th>NewConstruction</th>\n",
       "      <th>MarketPredictorScale</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>300805.0</td>\n",
       "      <td>9373</td>\n",
       "      <td>2400</td>\n",
       "      <td>3.00</td>\n",
       "      <td>6</td>\n",
       "      <td>7</td>\n",
       "      <td>1991</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>70000</td>\n",
       "      <td>229000</td>\n",
       "      <td>98002</td>\n",
       "      <td>False</td>\n",
       "      <td>1805.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1076162.0</td>\n",
       "      <td>20156</td>\n",
       "      <td>3764</td>\n",
       "      <td>3.75</td>\n",
       "      <td>4</td>\n",
       "      <td>10</td>\n",
       "      <td>2005</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>203000</td>\n",
       "      <td>590000</td>\n",
       "      <td>98166</td>\n",
       "      <td>True</td>\n",
       "      <td>283162.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>761805.0</td>\n",
       "      <td>26036</td>\n",
       "      <td>2060</td>\n",
       "      <td>1.75</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>1947</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>183000</td>\n",
       "      <td>275000</td>\n",
       "      <td>98166</td>\n",
       "      <td>False</td>\n",
       "      <td>303805.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>442065.0</td>\n",
       "      <td>8618</td>\n",
       "      <td>3200</td>\n",
       "      <td>3.75</td>\n",
       "      <td>5</td>\n",
       "      <td>7</td>\n",
       "      <td>1966</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>104000</td>\n",
       "      <td>229000</td>\n",
       "      <td>98168</td>\n",
       "      <td>False</td>\n",
       "      <td>109065.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>297065.0</td>\n",
       "      <td>8620</td>\n",
       "      <td>1720</td>\n",
       "      <td>1.75</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>1948</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>104000</td>\n",
       "      <td>205000</td>\n",
       "      <td>98168</td>\n",
       "      <td>False</td>\n",
       "      <td>-11935.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   AdjSalePrice  SqFtLot  SqFtTotLiving  Bathrooms  Bedrooms  BldgGrade  \\\n",
       "0      300805.0     9373           2400       3.00         6          7   \n",
       "1     1076162.0    20156           3764       3.75         4         10   \n",
       "2      761805.0    26036           2060       1.75         4          8   \n",
       "3      442065.0     8618           3200       3.75         5          7   \n",
       "4      297065.0     8620           1720       1.75         4          7   \n",
       "\n",
       "   YrBuilt  YrRenovated  TrafficNoise  LandVal  ImpsVal  ZipCode  \\\n",
       "0     1991            0             0    70000   229000    98002   \n",
       "1     2005            0             0   203000   590000    98166   \n",
       "2     1947            0             0   183000   275000    98166   \n",
       "3     1966            0             0   104000   229000    98168   \n",
       "4     1948            0             0   104000   205000    98168   \n",
       "\n",
       "   NewConstruction  MarketPredictorScale  \n",
       "0            False                1805.0  \n",
       "1             True              283162.0  \n",
       "2            False              303805.0  \n",
       "3            False              109065.0  \n",
       "4            False              -11935.0  "
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "H['MarketPredictorScale'] = avg_valzip\n",
    "H.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I created a new column with the variable in the MPS. Then used the head() to see the output"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>AdjSalePrice</th>\n",
       "      <th>SqFtLot</th>\n",
       "      <th>SqFtTotLiving</th>\n",
       "      <th>Bathrooms</th>\n",
       "      <th>Bedrooms</th>\n",
       "      <th>BldgGrade</th>\n",
       "      <th>YrBuilt</th>\n",
       "      <th>YrRenovated</th>\n",
       "      <th>TrafficNoise</th>\n",
       "      <th>LandVal</th>\n",
       "      <th>ImpsVal</th>\n",
       "      <th>ZipCode</th>\n",
       "      <th>NewConstruction</th>\n",
       "      <th>MarketPredictorScale</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>297065.0</td>\n",
       "      <td>8620</td>\n",
       "      <td>1720</td>\n",
       "      <td>1.75</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>1948</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>104000</td>\n",
       "      <td>205000</td>\n",
       "      <td>98168</td>\n",
       "      <td>False</td>\n",
       "      <td>-11935.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>380785.0</td>\n",
       "      <td>34465</td>\n",
       "      <td>1750</td>\n",
       "      <td>1.50</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>1961</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>165000</td>\n",
       "      <td>227000</td>\n",
       "      <td>98178</td>\n",
       "      <td>False</td>\n",
       "      <td>-11215.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>160236.0</td>\n",
       "      <td>12750</td>\n",
       "      <td>840</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1925</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>133000</td>\n",
       "      <td>73000</td>\n",
       "      <td>98055</td>\n",
       "      <td>False</td>\n",
       "      <td>-45764.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>634754.0</td>\n",
       "      <td>7320</td>\n",
       "      <td>2120</td>\n",
       "      <td>2.75</td>\n",
       "      <td>3</td>\n",
       "      <td>8</td>\n",
       "      <td>1901</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>261000</td>\n",
       "      <td>422000</td>\n",
       "      <td>98122</td>\n",
       "      <td>False</td>\n",
       "      <td>-48246.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>432352.0</td>\n",
       "      <td>3485</td>\n",
       "      <td>2620</td>\n",
       "      <td>1.50</td>\n",
       "      <td>4</td>\n",
       "      <td>7</td>\n",
       "      <td>1920</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>235000</td>\n",
       "      <td>373000</td>\n",
       "      <td>98122</td>\n",
       "      <td>False</td>\n",
       "      <td>-175648.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22681</th>\n",
       "      <td>360518.0</td>\n",
       "      <td>6021</td>\n",
       "      <td>2510</td>\n",
       "      <td>3.25</td>\n",
       "      <td>4</td>\n",
       "      <td>8</td>\n",
       "      <td>1925</td>\n",
       "      <td>1972</td>\n",
       "      <td>1</td>\n",
       "      <td>195000</td>\n",
       "      <td>403000</td>\n",
       "      <td>98126</td>\n",
       "      <td>False</td>\n",
       "      <td>-237482.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22683</th>\n",
       "      <td>231269.0</td>\n",
       "      <td>4134</td>\n",
       "      <td>650</td>\n",
       "      <td>1.00</td>\n",
       "      <td>2</td>\n",
       "      <td>6</td>\n",
       "      <td>1942</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>194000</td>\n",
       "      <td>45000</td>\n",
       "      <td>98126</td>\n",
       "      <td>False</td>\n",
       "      <td>-7731.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22685</th>\n",
       "      <td>1586196.0</td>\n",
       "      <td>23914</td>\n",
       "      <td>4720</td>\n",
       "      <td>4.50</td>\n",
       "      <td>4</td>\n",
       "      <td>11</td>\n",
       "      <td>2000</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>703000</td>\n",
       "      <td>951000</td>\n",
       "      <td>98040</td>\n",
       "      <td>False</td>\n",
       "      <td>-67804.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22686</th>\n",
       "      <td>220744.0</td>\n",
       "      <td>11170</td>\n",
       "      <td>1070</td>\n",
       "      <td>1.00</td>\n",
       "      <td>4</td>\n",
       "      <td>6</td>\n",
       "      <td>1971</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>92000</td>\n",
       "      <td>130000</td>\n",
       "      <td>98055</td>\n",
       "      <td>False</td>\n",
       "      <td>-1256.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>22688</th>\n",
       "      <td>475489.0</td>\n",
       "      <td>4400</td>\n",
       "      <td>790</td>\n",
       "      <td>1.50</td>\n",
       "      <td>3</td>\n",
       "      <td>7</td>\n",
       "      <td>1928</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>311000</td>\n",
       "      <td>268000</td>\n",
       "      <td>98103</td>\n",
       "      <td>False</td>\n",
       "      <td>-103511.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5398 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "       AdjSalePrice  SqFtLot  SqFtTotLiving  Bathrooms  Bedrooms  BldgGrade  \\\n",
       "4          297065.0     8620           1720       1.75         4          7   \n",
       "6          380785.0    34465           1750       1.50         3          8   \n",
       "10         160236.0    12750            840       1.00         2          6   \n",
       "14         634754.0     7320           2120       2.75         3          8   \n",
       "15         432352.0     3485           2620       1.50         4          7   \n",
       "...             ...      ...            ...        ...       ...        ...   \n",
       "22681      360518.0     6021           2510       3.25         4          8   \n",
       "22683      231269.0     4134            650       1.00         2          6   \n",
       "22685     1586196.0    23914           4720       4.50         4         11   \n",
       "22686      220744.0    11170           1070       1.00         4          6   \n",
       "22688      475489.0     4400            790       1.50         3          7   \n",
       "\n",
       "       YrBuilt  YrRenovated  TrafficNoise  LandVal  ImpsVal  ZipCode  \\\n",
       "4         1948            0             0   104000   205000    98168   \n",
       "6         1961            0             0   165000   227000    98178   \n",
       "10        1925            0             0   133000    73000    98055   \n",
       "14        1901            0             0   261000   422000    98122   \n",
       "15        1920            0             0   235000   373000    98122   \n",
       "...        ...          ...           ...      ...      ...      ...   \n",
       "22681     1925         1972             1   195000   403000    98126   \n",
       "22683     1942            0             0   194000    45000    98126   \n",
       "22685     2000            0             1   703000   951000    98040   \n",
       "22686     1971            0             0    92000   130000    98055   \n",
       "22688     1928            0             0   311000   268000    98103   \n",
       "\n",
       "       NewConstruction  MarketPredictorScale  \n",
       "4                False              -11935.0  \n",
       "6                False              -11215.0  \n",
       "10               False              -45764.0  \n",
       "14               False              -48246.0  \n",
       "15               False             -175648.0  \n",
       "...                ...                   ...  \n",
       "22681            False             -237482.0  \n",
       "22683            False               -7731.0  \n",
       "22685            False              -67804.0  \n",
       "22686            False               -1256.0  \n",
       "22688            False             -103511.0  \n",
       "\n",
       "[5398 rows x 14 columns]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "H.loc[(H.MarketPredictorScale < 0)]"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I used the loc() to access only the houses whos MPS was negative"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "AdjSalePrice            5398\n",
       "SqFtLot                 5398\n",
       "SqFtTotLiving           5398\n",
       "Bathrooms               5398\n",
       "Bedrooms                5398\n",
       "BldgGrade               5398\n",
       "YrBuilt                 5398\n",
       "YrRenovated             5398\n",
       "TrafficNoise            5398\n",
       "LandVal                 5398\n",
       "ImpsVal                 5398\n",
       "ZipCode                 5398\n",
       "NewConstruction         5398\n",
       "MarketPredictorScale    5398\n",
       "dtype: int64"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "MPS = H.loc[(H.MarketPredictorScale < 0)]\n",
    "MPS.count()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I placed all the house with negative MarketPredictorScale into a variable called MPS then used the count() to produce the number of house in this data set"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The percent of houses with negative MPS is: 23.79126448940015\n"
     ]
    }
   ],
   "source": [
    "rows = H.shape[0]\n",
    "\n",
    "percent = 5398/rows * 100\n",
    "print(\"The percent of houses with negative MPS is: \" + str(percent))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "I use the function shape() to find the total number of rows in the column so we can calculate our percentages"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.6.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
